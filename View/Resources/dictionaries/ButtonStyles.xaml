<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:Fork.View.Xaml2.Controls"
                    xmlns:model="clr-namespace:Fork.Logic.Model">
    
    <!-- default style, applies to all buttons -->
    <Style x:Key="DefaultButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource foregroundDefault}" />
        <Setter Property="BorderBrush" Value="{DynamicResource backgroundLight}" />
        <Setter Property="Padding" Value="5,3" />
        <Setter Property="Cursor" Value="Hand"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource buttonHover}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- for borderless buttons -->
    <Style x:Key="Borderless" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="BorderThickness" Value="0" />
    </Style>

    <!-- window close button -->
    <Style x:Key="CloseButton" TargetType="Button" BasedOn="{StaticResource Borderless}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource accentDefault}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- TextButton -->
    <Style x:Key="TextButton" TargetType="Button" BasedOn="{StaticResource DefaultButtonStyle}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource buttonDefault}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource buttonBgrDefault}"/>
                <Setter Property="Background" Value="Transparent"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- RoundedTextButton -->
    <Style x:Key="RoundedTextButton" TargetType="Button" BasedOn="{StaticResource DefaultButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{DynamicResource buttonBgrDefault}" Height="35" CornerRadius="5">
                        <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{DynamicResource Montserrat-Bold}"
                                   Text="{TemplateBinding Content}" Foreground="{DynamicResource backgroundDefault}" FontSize="17"
                                   x:Name="text" Margin="10 0"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="text" Property="Foreground" Value="{DynamicResource textSelected}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RoundedTextButtonRed" TargetType="Button" BasedOn="{StaticResource DefaultButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{DynamicResource buttonBgrDefault}" Height="35" CornerRadius="5">
                        <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{DynamicResource Montserrat-Bold}"
                                   Text="{TemplateBinding Content}" Foreground="{DynamicResource backgroundDefault}" FontSize="17"
                                   x:Name="text" Margin="10 0"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="text" Property="Foreground" Value="{DynamicResource buttonBgrRed}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BecomeSupporterBtn" TargetType="Button" BasedOn="{StaticResource DefaultButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Margin="10" Background="{DynamicResource buttonSupporter}" CornerRadius="6">
                        <TextBlock Text="{TemplateBinding Content}" Foreground="{DynamicResource textSupporter}" Margin="30 10" 
                            FontFamily="{DynamicResource Montserrat-Bold}" FontSize="16" x:Name="text"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="text" Property="Foreground" Value="{DynamicResource textSelected}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" BasedOn="{StaticResource DefaultButtonStyle}"></Style>


    <Style TargetType="controls:IconButton" BasedOn="{StaticResource DefaultButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border x:Name="imageBorder" Background="{TemplateBinding Background}" CornerRadius="8" 
                            Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                        <Image x:Name="image" Source="{Binding IconSource, RelativeSource={RelativeSource TemplatedParent}}" 
                               Width="{Binding IconWidth, RelativeSource={RelativeSource TemplatedParent}}"
                               Height="{Binding IconHeight, RelativeSource={RelativeSource TemplatedParent}}" 
                               RenderOptions.BitmapScalingMode="Linear"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="image" Property="Source" Value="{Binding HoverIconSource, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="imageBorder" Property="Background" Value="{Binding HoverBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RoundedIconButton" TargetType="controls:IconButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border x:Name="imageBorder" Background="{TemplateBinding Background}" CornerRadius="8000" 
                            Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                        <Image x:Name="image" Source="{Binding IconSource, RelativeSource={RelativeSource TemplatedParent}}" 
                               Width="{Binding IconWidth, RelativeSource={RelativeSource TemplatedParent}}"
                               Height="{Binding IconHeight, RelativeSource={RelativeSource TemplatedParent}}" 
                               RenderOptions.BitmapScalingMode="Linear"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="image" Property="Source" Value="{Binding HoverIconSource, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="imageBorder" Property="Background" Value="{Binding HoverBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StartStopIconButton" TargetType="controls:IconButton" BasedOn="{StaticResource {x:Type controls:IconButton}}">        
        <Style.Triggers>
            <DataTrigger Binding="{Binding CurrentStatus}" Value="{x:Static model:ServerStatus.RUNNING}">
                <Setter Property="Background" Value="{DynamicResource buttonBgrRed}"/>
                <Setter Property="HoverBackground" Value="{DynamicResource buttonBgrRed}"/>
                <Setter Property="IconSource" Value="pack://application:,,,/View/Resources/images/Icons/Stop.png"/>
                <Setter Property="HoverIconSource" Value="pack://application:,,,/View/Resources/images/Icons/StopW.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding CurrentStatus}" Value="{x:Static model:ServerStatus.STARTING}">
                <Setter Property="Background" Value="{DynamicResource buttonBgrRed}"/>
                <Setter Property="HoverBackground" Value="{DynamicResource buttonBgrRed}"/>
                <Setter Property="IconSource" Value="pack://application:,,,/View/Resources/images/Icons/Stop.png"/>
                <Setter Property="HoverIconSource" Value="pack://application:,,,/View/Resources/images/Icons/StopW.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding CurrentStatus}" Value="{x:Static model:ServerStatus.STOPPED}">
                <Setter Property="Background" Value="{DynamicResource buttonBgrGreen}"/>
                <Setter Property="HoverBackground" Value="{DynamicResource buttonBgrGreen}"/>
                <Setter Property="IconSource" Value="pack://application:,,,/View/Resources/images/Icons/Start.png"/>
                <Setter Property="HoverIconSource" Value="pack://application:,,,/View/Resources/images/Icons/StartW.png"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="RestartIconButton" TargetType="controls:IconButton" BasedOn="{StaticResource {x:Type controls:IconButton}}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding CurrentStatus}" Value="{x:Static model:ServerStatus.RUNNING}">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding CurrentStatus}" Value="{x:Static model:ServerStatus.STARTING}">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding CurrentStatus}" Value="{x:Static model:ServerStatus.STOPPED}">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>